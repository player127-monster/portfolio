/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: nimzu (https://sketchfab.com/nimzuk)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/foxs-islands-163b68e09fcc47618450150be7785907
Title: Fox's islands
*/

import React, { useEffect, useRef } from 'react'
import { useGLTF } from '@react-three/drei'
import {useFrame,useThree} from '@react-three/fiber';
import { a } from '@react-spring/three';
import islandScene from '../assets/3d/island.glb'

function Island({isRotating,setIsRotating,setCurrentStage, ...props}) {

  const islandRef =useRef();

  const {gl, viewport} = useThree();

  const { nodes, materials } = useGLTF(islandScene);

  //roatate and back to this position
  const lastX=useRef(0);

  //rotation speed
  const rotationSpeed=useRef(0);

  //click and rotate affect of that
  const dampingFactor=0.95;

  //handle mouse
  const handlePointerDown = (event) => {
    event.stopPropagation();
    event.preventDefault();
    setIsRotating(true);

    //check if we clicked or not
    const clientX =event.touches ? event.touches.clientX :event.clientX;

    lastX.current=clientX;
  };

  //handle pointer
  const handlePointerUp = (event) =>{
    event.stopPropagation();
    event.preventDefault();
    setIsRotating(false);

  };

  const handlePointerMove = (event) =>{
    event.stopPropagation();
    event.preventDefault();

    if(isRotating){
      const clientX = event.touches ? event.touches[0].clientX : event.clientX;

      const delta = (clientX - lastX.current) / viewport.width;

      islandRef.current.rotation.y += delta *0.01 * Math.PI;

      lastX.current = clientX;

      rotationSpeed.current = delta *0.01 * Math.PI;
      }
    

  };

// keyboard key press
  const handleKeyDown =(event) =>{
    if(event.key==="ArrowLeft"){
      if(!isRotating) setIsRotating(true);

      islandRef.current.rotation.y += 0.005 * Math.PI; //    +

      rotationSpeed.current = 0.007;
    }

    else if(event.key==="ArrowRight"){
      if(!isRotating) setIsRotating(true);

      islandRef.current.rotation.y -= 0.005 * Math.PI;   //    - negative side

      rotationSpeed.current = -0.007;
    }

  }


  // keyboard key release
  const handleKeyUp =(event) =>{
    if(event.key==="ArrowLeft" || event.key === "ArrowRight"){
      setIsRotating(false);

    }

  }


  useEffect(()=>{
    const canvas =gl.domElement;

    canvas.addEventListener("pointerdown", handlePointerDown);
    canvas.addEventListener("pointerup", handlePointerUp);
    canvas.addEventListener("pointermove", handlePointerMove);
    window.addEventListener("keydown", handleKeyDown);
    window.addEventListener("keyup", handleKeyUp);

    return ()=>{
      canvas.removeEventListener("pointerdown", handlePointerDown);
      canvas.removeEventListener("pointerup", handlePointerUp);
      canvas.removeEventListener("pointermove", handlePointerMove);
      window.removeEventListener("keydown", handleKeyDown);
      window.removeEventListener("keyup", handleKeyUp);
    }

  },[gl,handlePointerDown,handlePointerUp,handlePointerMove]);

  useFrame(() => {
    if (!islandRef.current) return;
  
    if (!isRotating) {
      if (Math.abs(rotationSpeed.current) > 0.001) {
        islandRef.current.rotation.y += rotationSpeed.current;
        rotationSpeed.current *= dampingFactor;
      } else {
        rotationSpeed.current = 0; // Stop completely
      }
    }
  
    // Detect which stage is visible only if rotating (or close to it)
    const rotation = islandRef.current.rotation.y;
    const normalization = ((rotation % (2 * Math.PI)) + 2 * Math.PI) % (2 * Math.PI);
  
    switch (true) {
      case normalization >= 5.45 && normalization <= 5.85:
        setCurrentStage(4);
        break;
      case normalization >= 0.85 && normalization <= 1.3:
        setCurrentStage(3);
        break;
      case normalization >= 2.4 && normalization <= 2.6:
        setCurrentStage(2);
        break;
      case normalization >= 4.25 && normalization <= 4.75:
        setCurrentStage(1);
        break;
      default:
        setCurrentStage(null);
    }
  });
  

  return (
    <a.group ref={islandRef} {...props}>
        <mesh
          geometry={nodes.polySurface944_tree_body_0.geometry}
          material={materials.PaletteMaterial001}
        />
        <mesh
          geometry={nodes.polySurface945_tree1_0.geometry}
          material={materials.PaletteMaterial001}
        />
        <mesh
          geometry={nodes.polySurface946_tree2_0.geometry}
          material={materials.PaletteMaterial001}
        />
        <mesh
          geometry={nodes.polySurface947_tree1_0.geometry}
          material={materials.PaletteMaterial001}
        />
        <mesh
          geometry={nodes.polySurface948_tree_body_0.geometry}
          material={materials.PaletteMaterial001}
        />
        <mesh
          geometry={nodes.polySurface949_tree_body_0.geometry}
          material={materials.PaletteMaterial001}
        />
        <mesh
          geometry={nodes.pCube11_rocks1_0.geometry}
          material={materials.PaletteMaterial001}
        />   
     
    </a.group>
  )
}

export default Island;